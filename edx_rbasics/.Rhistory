library(dslabs)
data("murders")
library("dplyr")
# Redefine murders so that it includes column named rate with the per 100,000 murder rates
murders <- mutate(murders,rate=population*100000)
# Redefine murders so that it includes column named rate with the per 100,000 murder rates
murders <- mutate(murders,rate=total/population*100000)
# mutate murders, add rank highest to lowest
murders <- mutate(murders,rank=rank(-rate) )
#show only state names and abb
select(murders,state,abb)
#show top 5 states with highest murder rate
select(murders,state,rank)
#show top 5 states with highest murder rate
select(murders,state,rank,rate)
#show top 5 states with highest murder rate
select(murders,state,rank,rate,order(rank))
#filter rank <= 5
filter(murders,rank <= 5)
#filter rank <= 5
filter(murders,rank <= 5) %>% select(state)
sort(-murders$rate)
sort(murders$rate)
#show top 5 states with highest murder rate
select(murders,state,rank,rate)
#show top 5 states with highest murder rate
select(murders,state,rank,rate) %>% filter(rank <= 5)
#filter rank <= 5
filter(murders,rank <= 5) %>% select(state,rank) %>% sort(-rate)
#filter rank <= 5
filter(murders,rank <= 5) %>% select(state,rank) %>% sort(-rank)
#filter rank <= 5
filter(murders,rank <= 5) %>% select(state,rank) %>% sort(rank)
#filter rank <= 5
filter(murders,rank <= 5) %>% select(state,rank)# %>% sort(rank)
#show top 5 states with highest murder rate
select(murders,state,rank,rate) %>% filter(rank <= 5)
#select(murders,sort(murders$rate)
#create new data.drame removes south region
filter(murders, region !- 'South')
#select(murders,sort(murders$rate)
#create new data.drame removes south region
filter(murders, region != 'South')
#select(murders,sort(murders$rate)
#create new data.drame removes south region
no_south <- filter(murders, region != 'South')
nrow(no_south)
# Create a new data frame called murders_nw with only the states from the northeast and the west
filter(murders, region == 'Northeast' & 'West' )
# Create a new data frame called murders_nw with only the states from the northeast and the west
filter(murders, region = 'Northeast' & 'West' )
# Create a new data frame called murders_nw with only the states from the northeast and the west
filter(murders, region =- 'Northeast' )
# Create a new data frame called murders_nw with only the states from the northeast and the west
filter(murders, region == 'Northeast' )
# Create a new data frame called murders_nw with only the states from the northeast and the west
filter(murders, region == 'Northeast' & region == 'West' )
# Create a new data frame called murders_nw with only the states from the northeast and the west
filter(murders, region == 'Northeast' & 'West' )
# Create a new data frame called murders_nw with only the states from the northeast and the west
filter(murders, region == 'Northeast' | 'West' )
# Create a new data frame called murders_nw with only the states from the northeast and the west
filter(murders, region == 'Northeast', region == 'West' )
filter(murders, region %in% c('Northeast','West'))
murders_nw <- filter(murders, region %in% c('Northeast','West'))
nrow(murders_nw)
# Create a table, call it my_states, that satisfies both the conditions
filter(murders, region %in% c('Northeast', 'West' ))
# Create a table, call it my_states, that satisfies both the conditions
filter(murders, region %in% c('Northeast', 'West' ) & rate < 1)
# Create a table, call it my_states, that satisfies both the conditions
filter(murders, region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
# Create a table, call it my_states, that satisfies both the conditions
my_states <- filter(murders, region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
# Create a table, call it my_states, that satisfies both the conditions
my_states <- filter(murders, region %in% c('Northeast', 'West' ) & rate < 1)
select(my_states, state, rate, rank)
# Create new data frame called my_states (with specifications in the instructions) from the original murders
data("murders") %>% murders <- mutate(murders,rate=total/population*100000, rank=rank(-rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
# Create new data frame called my_states (with specifications in the instructions) from the original murders
data("murders") %>% mutate(rate=total/population*100000, rank=rank(-rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
# Create new data frame called my_states (with specifications in the instructions) from the original murders
data("murders") %>% mutate(murders, rate=total/population*100000, rank=rank(-rate))# %>%
# Create new data frame called my_states (with specifications in the instructions) from the original murders
data("murders")
my_states <- mutate(murders, rate=total/population*100000, rank=rank(-rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
my_states
data("murders")
mutate(murders,rate=total/population*100000, rank(rate)) %>%
filter(murders, region %in% c('Northeast', 'West' ) & rate < 1) %>% select(my_states, state, rate, rank)
data("murders")
mutate(murders,rate=total/population*100000, rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
my_states <- mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% sort()
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% sort(state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% sort(select(state, rate, rank))
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% order(state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order(select(state, rate, rank), state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% order(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% order("state", "rate", "rank")
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% sort()
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% sort(state)
?sort
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% order(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1)
class(mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1),state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1))
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order("state")
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order("state", "rate", "rank")
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order()
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% sort()
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order()
?order
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order()
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% sort()
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% class(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order(names(state))
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% order(names())
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(order(state))
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
order(mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank), state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% order(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% sort()
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% sort
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% sort(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% sort([state])
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% arrange(state)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% arrange(state,rate)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% arrange(rate)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% arrange(state,rate)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% order(state,rate)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% arrange(state,rate)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% arrange(state,as.numeric(rate))
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% arrange(state,rate)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% arrange(state,rank)
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% df[order(df[,1]),]
mutate(murders,rate=total/population*100000, rank=rank(rate)) %>%
filter(region %in% c('Northeast', 'West' ) & rate < 1) %>% select(state, rate, rank) %>% order(state, rate, rank)
pop_in_mills <- murders$total/10^6
tot_gun_murders <-murders$total
plot(pop_in_mills, tot_gun_murders)
hist(murders$rate)
hist(murders$population/murders$total*100000)
murders <- mutate(murders, rate <-population/total*100000)
?mutate
help mutate
murders <- mutate(murders, rate=population/total*100000)
library(dplyr)
murders <- mutate(murders, rate=population/total*100000)
boxplot(rate~region, data = murders)
# Load the datasets and define some variables
library(dslabs)
data(murders)
population_in_millions <- murders$population/10^6
total_gun_murders <- murders$total
plot(population_in_millions, total_gun_murders)
log10_population <- log10(murders$population)
log10_total_gun_murders <- log10(murders$total)
plot(log10_population, log10_total_gun_murders)
population_in_millions <- murders$population/10^6
total_gun_murders <- murders$total
plot(population_in_millions, total_gun_murders)
log10_population <- log10(murders$population)
# Transform total gun murders using log10 transformation and save to object log10_total_gun_murders
log10_total_gun_murders <- log10(murders$total)
# Create a scatterplot with the log scale transformed population and murders
plot(log10_population, log10_total_gun_murders)
population_in_millions <- murders$population/10^6
total_gun_murders <- murders$total
plot(population_in_millions, total_gun_murders)
population_in_millions <- murders$population/10^6
hist(population_in_millions)
boxplot(population~region, data = murders)
data("murders")
murder_rate <- murders$population/murders$total*100000
ind <- which.min(murder_rate)
ind <- which.min(murder_rate)
if(murder_rate[ind] < 0.5) {
print(murders$state[ind])
} else {
print("No State that Low" )
}
if(murder_rate[ind] < 1.5) {
print(murders$state[ind])
} else {
print("No State that Low" )
}
ind
murder_rate <- murders$total/murders$population*100000
ind <- which.min(murder_rate)
if(murder_rate[ind] < 1.5) {
print(murders$state[ind])
} else {
print("No State that Low" )
}
a <- c(0,1,2,-4,5)
result <- ifelse(a > 0, 1/a. NA)
result <- ifelse(a > 0, 1/a, NA)
result
result <- ifelse(a > 0, 1/a, NA)
result
#replace all NA values in a vector with 0
data(na_example)
sum(is.na(na_example))
no_nas <- ifelse(is.na(na_example), 0, na_example)
sum(is.na(no_nas))
z <- c(TRUE, TRUE, FALSE)
any(z)
z <- c(FALSE, FALSE, FALSE)
any(z)
z <- c(TRUE, TRUE, TRUE)
all(z)
sum(is.na(no_nas))
x <- c(1,2,-3,4)
if(all(x>0)){
print("All Positives")
} else{
print("Not All Positives")
}
new_names <- ifelse(length(murders$state > 8), murders$abb, murders$state)
char_len <- nchar(murders$state)
head(char_len)
new_names <- ifelse(nchars(murders$state > 8), murders$abb, murders$state)
new_names <- ifelse(nchar(murders$state > 8), murders$abb, murders$state)
new_names
new_names <- ifelse(char_len > 8, murders$abb, murders$state)
new_names
new_names <- ifelse(nchar(murders$state) > 8, murders$abb, murders$state)
new_names
sum_n <- function(n) {
sum(c(1:n))
}
sum_n <- function(n) {
n <- sum(c(1:n))
n
}
# Use the function to determine the sum of integers from 1 to 5000
sum_n(5000)
# Use the function to determine the sum of integers from 1 to 5000
sum_n(5)
altman_plot <- function(x, y) {
plot(y-x, x+y)
}
altman_plot(1, 2)
altman_plot <- function(x, y) {
plot(x+y, y-x)
}
altman_plot(1, 2)
altman_plot(2, 10)
x <- 8
my_func <- function(y){
x <- 9
print(x)
y + x
}
my_func(x)
print(x)
example_func <- function(n){
x <- 1:n
sum(x)
}
# Here is the sum of the first 100 numbers
example_func(100)
compute_s_n <- function(n){
s_n <- vector(1:n)
for (x in 1:n) {
s_n[x] <- x^2
}
sum(s_n)
}
compute_s_n(2)
compute_s_n <- function(n){
s_n <- vector(length = n)
for (x in 1:n) {
s_n[x] <- x^2
}
sum(s_n)
}
compute_s_n(2)
compute_s_n(10)
compute_s_n <- function(n){
x <- 1:n
sum(x^2)
}
# Create a vector for storing results
s_n <- vector("numeric", 25)
# write a for-loop to store the results in s_n
for(i in 1:n){
s_n[i] <- compute_sn(i)
}
for(i in 1:25){
s_n[i] <- compute_sn(i)
}
for(i in 1:25){
s_n[i] <- compute_s_n(i)
}
plot(n, s_n)
n <- 1:25
#Check the Math Plots_n (on the y-axis) against n (on the x-axis).
plot(n, s_n)
identical(n, s_n)
identical(s_n, identical(s_n, n*(n+1)(2n+1)/6))
